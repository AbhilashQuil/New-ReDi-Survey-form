export default Form;
export type Options = {
    readOnly?: boolean;
    useSessionToken?: boolean;
    flatten?: boolean;
    sanitize?: boolean;
    renderMode?: string;
    noAlerts?: boolean;
    i18n?: object;
    template?: string;
    saveDraft?: boolean;
};
export type FormProps = {
    src?: string;
    url?: string;
    form?: object;
    submission?: object;
    options?: Options;
    onPrevPage?: Function;
    onNextPage?: Function;
    onCancel?: Function;
    onChange?: Function;
    onCustomEvent?: Function;
    onComponentChange?: Function;
    onSubmit?: Function;
    onSubmitDone?: Function;
    onFormLoad?: Function;
    onError?: Function;
    onRender?: Function;
    onAttach?: Function;
    onBuild?: Function;
    onFocus?: Function;
    onBlur?: Function;
    onInitialized?: Function;
    formReady?: Function;
    formioform?: any;
};
/**
 * @param {FormProps} props
 * @returns {JSX.Element}
 */
declare function Form(props: FormProps): JSX.Element;
declare namespace Form {
    namespace propTypes {
        let src: any;
        let url: any;
        let form: any;
        let submission: any;
        let options: any;
        let onPrevPage: any;
        let onNextPage: any;
        let onCancel: any;
        let onChange: any;
        let onCustomEvent: any;
        let onComponentChange: any;
        let onSubmit: any;
        let onSubmitDone: any;
        let onFormLoad: any;
        let onError: any;
        let onRender: any;
        let onAttach: any;
        let onBuild: any;
        let onFocus: any;
        let onBlur: any;
        let onInitialized: any;
        let formReady: any;
        let formioform: any;
    }
    function getDefaultEmitter(): EventEmitter;
}
import EventEmitter from 'eventemitter2';
//# sourceMappingURL=Form.d.ts.map